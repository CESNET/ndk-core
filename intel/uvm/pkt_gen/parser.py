#!/bin/python3

#  SPDX-License-Identifier: BSD-3-Clause
#
#  simple pakcet generator. Packet are generated by random walk.
#  In this file is resolving how prototoclols follows.
#
#  Copyright (C) 2022 CESNET
#  Author(s):
#    Radek IÅ¡a <isa@cesnet.cz>

from config import *
import scapy.all
import scapy.utils
import scapy.contrib.mpls
import random
import string

class base_node:
    def __init__(self, name):
        self.name = name

    def packet_gen(self, packet, config):
        pass

#################################
# PAYLOAD protocols
#################################
class Empty(base_node):
    def __init__(self):
        super().__init__("Empty");

class Payload(base_node):
    def __init__(self):
        super().__init__("Payload");

    def packet_gen(self, packet, config):
        packet.append(scapy.all.Raw())

#################################
# L7 protocols
#################################
class ICMPv4(base_node):
    def __init__(self):
        super().__init__("ICMPv4");

    def packet_gen(self, packet, config):
        packet.append(scapy.all.ICMP())

class ICMPv6(base_node):
    def __init__(self):
        super().__init__("ICMPv6");

    def packet_gen(self, packet, config):
        packet.append(scapy.all.ICMPv6Unknown())

class UDP(base_node):
    def __init__(self):
        super().__init__("UDP");

    def packet_gen(self, packet, config):
        protocol_next = [Payload(), Empty()];
        packet.append(scapy.all.UDP())

        protocol = random.choice(protocol_next)
        protocol.packet_gen(packet, config);

class TCP(base_node):
    def __init__(self):
        super().__init__("TCP");

    def packet_gen(self, packet, config):
        protocol_next = [Payload(), Empty()];
        packet.append(scapy.all.TCP())

        protocol = random.choice(protocol_next)
        protocol.packet_gen(packet, config);

#################################
# IP protocols
#################################
class IPv4(base_node):
    def __init__(self):
        super().__init__("IPv4");

    def packet_gen(self, packet, config):
        packet.append(scapy.all.IP(version=4))
        #randomize from list
        protocol_next = [Payload(), Empty(), ICMPv4(), UDP(), TCP()];
        protocol = random.choice(protocol_next)
        protocol.packet_gen(packet, config);

class IPv6(base_node):
    def __init__(self):
        super().__init__("IPv6");

    def packet_gen(self, packet, config):
        protocol_next = [Payload(), Empty(), ICMPv6(), UDP(), TCP()];
        packet.append(scapy.all.IPv6(version=6))
        #randomize from list
        protocol = random.choice(protocol_next)
        protocol.packet_gen(packet, config);

#################################
# ETHERNET protocols
#################################
class MPLS(base_node):
    def __init__(self):
        super().__init__("MPLS");

    def packet_gen(self, packet, config):
        if (config.mpls != 0):
            config.mpls -= 1
        mpls_weight     = (1, 0)[config.mpls == 0]

        protocol_next   = [IPv4(), IPv6(), MPLS(), Empty()]
        protocol_weight = [     1,      1, mpls_weight,  1]

        packet.append(scapy.contrib.mpls.MPLS())
        #randomize from list
        #protocol = random.choice(self.next)
        protocol = random.choices(protocol_next, protocol_weight)[0]
        protocol.packet_gen(packet, config);


class PPP(base_node):
    def __init__(self):
        super().__init__("PPP");

    def packet_gen(self, packet, config):
        protocol_next   = [IPv4(), IPv6(), MPLS(), Empty()]

        packet.append(scapy.all.PPP())
        #randomize from list
        #protocol = random.choice(self.next)
        protocol = random.choice(protocol_next)
        protocol.packet_gen(packet, config);

class VLAN(base_node):
    def __init__(self):
        super().__init__("VLAN");

    def packet_gen(self, packet, config):
        if (config.vlan != 0):
            config.vlan -= 1

        vlan_weight     = (1, 0)[config.vlan == 0]
        protocol_next   = [IPv4(), IPv6(), VLAN()     , MPLS(), Empty(), PPP()]
        protocol_weight = [     1,      1, vlan_weight,      1,       1,     1]

        packet.append(scapy.all.Dot1Q())
        #randomize from list
        #protocol = random.choice(self.next)
        protocol = random.choices(protocol_next, protocol_weight)[0]
        protocol.packet_gen(packet, config);


class ethernet(base_node):
    def __init__(self):
        super().__init__("ETH");

    def packet_gen(self, packet, config):
        protocol_next   = [IPv4(), IPv6(), VLAN(), MPLS(), Empty(), PPP()]

        packet.append(scapy.all.Ether())
        #randomize from list
        protocol = random.choice(protocol_next)
        protocol.packet_gen(packet, config);


